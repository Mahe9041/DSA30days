Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
_______________________________________________________________________________________________________________________________________________________________________
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int srt=nums[0],end=nums[0];
        do{
            srt=nums[srt];
            end=nums[nums[end]];
        }
        while(srt!=end);
        srt=nums[0];
        while(srt!=end)
        {
            srt=nums[srt];
            end=nums[end];
        }
        return srt;
    }
};
.......................................................................................................................................................................
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, 
white,and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
______________________________________________________________________________________________________________________________________________________________________
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0,mid,high=nums.size()-1;
        for(mid=0;mid<=high;)
        {
            if(nums[mid]==0)
            {
                int temp=nums[mid];
                nums[mid]=nums[low];
                nums[low]=temp;
                low+=1;
                mid+=1;
            }
            else if(nums[mid]==1)
            {
                mid+=1;
            }
            else if(nums[mid]==2)
            {
                int temp=nums[mid];
                nums[mid]=nums[high];
                nums[high]=temp;
                high-=1;
            }
        }
    }
};

......................................................................................................................................................................
