print name 5 times
print linearly from 1 to N
print from N to 1
print linearly from 1 to N (but by backtracking)
print lineary from N to 1 (but by backtarcking)
.......................................................................................................................................................................
#include <iostream>

using namespace std;
int name(int i,int n)
{
    if(i>n)
    {
        return 0;
    }
    cout<<"S Mahesh";
    name(i+1,n);
}
int main()
{
    int n;
    cin>>n;
    name(1,n);
    return 0;
}
.......................................................................................................................................................................
#include <iostream>

using namespace std;

int prtn(int i,int n)
{
    if(i>n)
    return 0;
    cout<<i;
    prtn(++i,n);
    
}

int main()
{
    int n;
    cin>>n;
    prtn(1,n);
    return 0;
}

.......................................................................................................................................................................
#include <iostream>

using namespace std;

int prtn(int n)
{
    if(n<=0)
    return 0;
    cout<<n;
    prtn(--n);
    
}

int main()
{
    int n;
    cin>>n;
    prtn(n);
    return 0;
}

.......................................................................................................................................................................
#include <iostream>

using namespace std;

int prtn(int i,int n)
{
    if(i<1)
    return 0;
    
    prtn(i-1,n);
    cout<<i;
}

int main()
{
    int n;
    cin>>n;
    prtn(n,n);
    return 0;
}

.......................................................................................................................................................................
#include <iostream>

using namespace std;

int prtn(int i,int n)
{
    if(i<1)
    return 0;
    
    prtn(i-1,n);
    cout<<n-i+1;
}

int main()
{
    int n;
    cin>>n;
    prtn(n,n);
    return 0;
}

.......................................................................................................................................................................
#leetcode:

Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500

.......................................................................................................................................................................

class Solution {
public:
    void findcombinations(int ind,vector<int> &c,int target,vector<vector<int>> &ans,vector<int> &ds)
    {
        if(ind==c.size())
        {
            if(target==0)
            {
                ans.push_back(ds);    
            }
            return;
        }
        if(target>=c[ind])
        {
            ds.push_back(c[ind]);
            findcombinations(ind,c,target-c[ind],ans,ds);
            ds.pop_back();
        }
        findcombinations(ind+1,c,target,ans,ds);
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> ds;
        findcombinations(0,candidates,target,ans,ds);
        return ans;
    }
};

......................................................................................................................................................................
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:


Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:


 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.


.......................................................................................................................................................................
class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
    bool solve(vector<vector<char>> &board)
    {
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
                if(board[i][j]=='.')
                {
                for(char c='1'; c<='9';c++)
                {
                    if(isValid(board,i,j,c)==true)
                    {
                        board[i][j]=c;
                        if(solve(board)==true)
                        {
                            return true;
                        }
                        else
                            board[i][j]='.';
                    }   
                }return false;
                }
            
        }
        return true;
    }
    bool isValid(vector<vector<char>> &board,int r,int c,char n)
    {
        for(int i=0;i<9;i++)
        {
            if(board[i][c]==n)
            {
                return false;
            }
            if(board[r][i]==n)
            {
                return false;
            }
            if(board[3*(r/3)+i/3][3*(c/3)+i%3]==n)
            {
                return false;
            }
        }
        return true;
    }
};

.......................................................................................................................................................................
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

.......................................................................................................................................................................
class Solution {
public:
    int issafe(int r,int c,vector<string> b,int n)
    {
        int row=r,col=c;
        while(row>=0 && col>=0)
        {
            if(b[row][col]=='Q')
            {
                return 0;
            }
            row-=1;
            col-=1;
        }
        row=r;col=c;
        while(col>=0)
        {
            if(b[row][col]=='Q')
            {
                return 0;
            }
            col-=1;
        }
        col=c;
        while(row<n && col>=0)
        {
            if(b[row][col]=='Q')
            {
                return 0;
            }
            row+=1;
            col-=1;
        }
        return 1;
    }
    void solve(int col,vector<string> &b,vector<vector<string>> &ans,int n)
    {
        if(col==n)
        {
            ans.push_back(b);
            return;
        }
        for(int row=0;row<n;row++)
        {
            if(issafe(row,col,b,n)==1)
            {
                b[row][col]='Q';
                solve(col+1,b,ans,n);
                b[row][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector <string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }
        solve(0,board,ans,n);
        return ans;
    }
};


.......................................................................................................................................................................
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
.......................................................................................................................................................................
#include<bits/stdc++.h>

using namespace std;
class Solution {
  private:
    void recurPermute(int ind, vector < int > & nums, vector < vector < int >> & ans) {
      if (ind == nums.size()) {
        ans.push_back(nums);
        return;
      }
      for (int i = ind; i < nums.size(); i++) {
          swap(nums[i],nums[ind]);
          recurPermute(ind+1,nums,ans);
          swap(nums[i],nums[ind]);
      }
    }
  public:
    vector < vector < int >> permute(vector < int > & nums) {
      vector < vector < int >> ans;
      vector < int > ds;
      recurPermute(0, nums, ans);
      return ans;
    }
};
.......................................................................................................................................................................

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

_____________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>

using namespace std;
class Solution {
  private:
    void recurPermute(int ind, vector < int > & nums, vector < vector < int >> & ans) {
      if (ind == nums.size()) {
        ans.push_back(nums);
        return;
      }
      for (int i = ind; i < nums.size(); i++) {
          swap(nums[i],nums[ind]);
          recurPermute(ind+1,nums,ans);
          swap(nums[i],nums[ind]);
      }
    }
  public:
    vector < vector < int >> permute(vector < int > & nums) {
      vector < vector < int >> ans;
      vector < int > ds;
      recurPermute(0, nums, ans);
      return ans;
    }
};
